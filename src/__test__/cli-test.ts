import {runCli} from '../cli';
import fs from 'fs';
import {expect} from 'chai';

const wait = (to) => new Promise((res) => setTimeout(res, to));

describe('cli', function () {

    it('should generate file', async function () {
        await runCli(['', '', '-p', `${__dirname}/fixtures/**/*.cssm`]);
        const content = fs.readFileSync(`${__dirname}/fixtures/test.cssi.ts`, 'utf8');
        expect(content.trim()).to.eql(
            `//DO NOT MODIFY generated by the ts-emeth script.
import { styleFactory, themeClass } from 'ts-emeth';

export { adopt } from 'ts-emeth';

export enum testCssStyles {
  "container" = "container",
  "camel-case" = "camel-case",
  "camelCase" = "camelCase",
  "word" = "word",
  "nameEdit" = "nameEdit",
}

export const CssStyles = testCssStyles;

export default styleFactory(themeClass({ displayName: "test" }), CssStyles);

`.trim())
    })
    it('should generate file from css module', async function () {

        await runCli(['', '', '-p', `${__dirname}/fixtures/**/*.module.css`]);
        await wait(400)
        const content = fs.readFileSync(`${__dirname}/fixtures/test2.module.cssi.ts`, 'utf8');
        expect(content.trim()).to.eql(
            `//DO NOT MODIFY generated by the ts-emeth script.
import { styleFactory, themeClass } from 'ts-emeth';

export { adopt } from 'ts-emeth';

export enum test2CssStyles {
  "container" = "container",
  "camel-case" = "camel-case",
  "camelCase" = "camelCase",
  "word" = "word",
  "nameEdit" = "nameEdit",
}

export const CssStyles = test2CssStyles;

export default styleFactory(themeClass({ displayName: "test2" }), CssStyles);

`.trim())
    })

})